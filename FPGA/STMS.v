// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="STMS,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-fgg484-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.543000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=30,HLS_SYN_FF=894,HLS_SYN_LUT=1672,HLS_VERSION=2019_2}" *)

module STMS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src,
        src_ap_vld,
        dst,
        dst_ap_vld,
        p,
        src_o,
        src_o_ap_vld,
        dst_o,
        dst_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] src;
input   src_ap_vld;
input  [31:0] dst;
input   dst_ap_vld;
input  [31:0] p;
output  [31:0] src_o;
output   src_o_ap_vld;
output  [31:0] dst_o;
output   dst_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_o_ap_vld;
reg dst_o_ap_vld;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] src_preg;
reg   [31:0] src_in_sig;
reg    src_ap_vld_preg;
reg    src_ap_vld_in_sig;
reg   [31:0] dst_preg;
reg   [31:0] dst_in_sig;
reg    dst_ap_vld_preg;
reg    dst_ap_vld_in_sig;
wire   [12:0] bitmap_address0;
reg    bitmap_ce0;
wire   [0:0] bitmap_q0;
reg    bitmap_ce1;
reg    bitmap_we1;
reg    src_blk_n;
reg    dst_blk_n;
reg    ap_block_state1;
reg   [14:0] lshr_ln4_reg_818;
reg   [16:0] tmp_6_reg_823;
wire   [31:0] k1_3_fu_259_p2;
reg   [31:0] k1_3_reg_828;
wire    ap_CS_fsm_state2;
wire  signed [31:0] xor_ln9_fu_338_p2;
reg  signed [31:0] xor_ln9_reg_835;
wire    ap_CS_fsm_state3;
wire  signed [31:0] xor_ln11_fu_363_p2;
reg  signed [31:0] xor_ln11_reg_840;
wire    ap_CS_fsm_state4;
wire   [31:0] out1_fu_400_p2;
reg   [31:0] out1_reg_845;
wire    ap_CS_fsm_state5;
wire   [0:0] status_fu_406_p2;
reg   [0:0] status_reg_850;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_208_p1;
reg   [31:0] tmp_reg_861;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_202_p2;
reg   [31:0] tmp_1_reg_867;
wire   [0:0] icmp_ln22_fu_446_p2;
reg   [0:0] icmp_ln22_reg_873;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln22_1_fu_452_p2;
reg   [0:0] icmp_ln22_1_reg_878;
wire   [0:0] icmp_ln22_2_fu_458_p2;
reg   [0:0] icmp_ln22_2_reg_883;
wire   [0:0] icmp_ln22_3_fu_464_p2;
reg   [0:0] icmp_ln22_3_reg_888;
wire   [0:0] and_ln22_1_fu_484_p2;
reg   [0:0] and_ln22_1_reg_893;
wire    ap_CS_fsm_state11;
wire  signed [31:0] xor_ln9_1_fu_563_p2;
reg  signed [31:0] xor_ln9_1_reg_904;
wire  signed [31:0] xor_ln9_2_fu_642_p2;
reg  signed [31:0] xor_ln9_2_reg_909;
wire  signed [31:0] xor_ln11_1_fu_672_p2;
reg  signed [31:0] xor_ln11_1_reg_914;
wire    ap_CS_fsm_state12;
wire  signed [31:0] xor_ln11_2_fu_697_p2;
reg  signed [31:0] xor_ln11_2_reg_919;
wire   [7:0] select_word_fu_722_p2;
reg   [7:0] select_word_reg_924;
wire    ap_CS_fsm_state13;
wire   [31:0] out3_fu_747_p2;
reg   [31:0] out3_reg_929;
wire   [2:0] i_fu_759_p2;
reg   [2:0] i_reg_937;
wire    ap_CS_fsm_state15;
reg   [12:0] bitmap_addr_reg_942;
wire   [0:0] icmp_ln35_fu_753_p2;
wire   [31:0] out3_2_fu_804_p1;
wire    ap_CS_fsm_state16;
reg   [31:0] out3_0_reg_181;
wire    ap_CS_fsm_state14;
reg   [2:0] i_0_reg_191;
wire   [63:0] zext_ln40_fu_776_p1;
reg   [0:0] flag_0_fu_128;
wire   [0:0] xor_ln40_fu_784_p2;
wire   [0:0] flag_0_load_load_fu_781_p1;
wire    ap_CS_fsm_state6;
wire  signed [31:0] key_fu_215_p2;
wire   [31:0] k1_2_fu_221_p2;
wire   [31:0] mul_ln4_fu_227_p2;
wire  signed [31:0] k1_fu_253_p3;
wire   [31:0] h1_1_fu_265_p2;
wire   [18:0] trunc_ln4_fu_270_p1;
wire   [12:0] lshr_ln4_1_fu_274_p4;
wire   [16:0] trunc_ln34_fu_292_p1;
wire   [31:0] h1_fu_284_p3;
wire   [31:0] shl_ln_fu_296_p4;
wire   [31:0] add_ln34_fu_306_p2;
wire   [31:0] h1_2_fu_312_p2;
wire   [31:0] h1_3_fu_318_p2;
wire   [15:0] lshr_ln9_fu_324_p4;
wire   [31:0] zext_ln9_fu_334_p1;
wire   [31:0] mul_ln10_fu_344_p2;
wire   [18:0] lshr_ln_fu_349_p4;
wire   [31:0] zext_ln11_fu_359_p1;
wire   [31:0] mul_ln12_fu_369_p2;
wire   [15:0] lshr_ln1_fu_374_p4;
wire   [31:0] zext_ln13_fu_384_p1;
wire   [0:0] tmp_5_fu_392_p3;
wire   [0:0] trunc_ln13_fu_388_p1;
wire   [31:0] bitcast_ln22_fu_412_p1;
wire   [31:0] bitcast_ln22_1_fu_429_p1;
wire   [7:0] tmp_2_fu_415_p4;
wire   [22:0] trunc_ln22_fu_425_p1;
wire   [7:0] tmp_3_fu_432_p4;
wire   [22:0] trunc_ln22_1_fu_442_p1;
wire   [0:0] or_ln22_fu_470_p2;
wire   [0:0] or_ln22_1_fu_474_p2;
wire   [0:0] and_ln22_fu_478_p2;
wire   [0:0] grp_fu_211_p2;
wire   [31:0] h1_5_fu_490_p2;
wire   [18:0] trunc_ln4_1_fu_495_p1;
wire   [12:0] lshr_ln4_2_fu_499_p4;
wire   [16:0] trunc_ln34_1_fu_517_p1;
wire   [31:0] shl_ln34_1_fu_521_p4;
wire   [31:0] h1_6_fu_509_p3;
wire   [31:0] add_ln34_2_fu_531_p2;
wire   [31:0] h1_7_fu_537_p2;
wire   [31:0] h1_8_fu_543_p2;
wire   [15:0] lshr_ln9_1_fu_549_p4;
wire   [31:0] zext_ln9_1_fu_559_p1;
wire   [31:0] h1_9_fu_569_p2;
wire   [18:0] trunc_ln4_2_fu_574_p1;
wire   [12:0] lshr_ln4_3_fu_578_p4;
wire   [16:0] trunc_ln34_2_fu_596_p1;
wire   [31:0] shl_ln34_2_fu_600_p4;
wire   [31:0] h1_10_fu_588_p3;
wire   [31:0] add_ln34_4_fu_610_p2;
wire   [31:0] h1_11_fu_616_p2;
wire   [31:0] h1_12_fu_622_p2;
wire   [15:0] lshr_ln9_2_fu_628_p4;
wire   [31:0] zext_ln9_2_fu_638_p1;
wire   [31:0] mul_ln10_1_fu_653_p2;
wire   [18:0] lshr_ln11_1_fu_658_p4;
wire   [31:0] zext_ln11_1_fu_668_p1;
wire   [31:0] mul_ln10_2_fu_678_p2;
wire   [18:0] lshr_ln11_2_fu_683_p4;
wire   [31:0] zext_ln11_2_fu_693_p1;
wire   [31:0] mul_ln12_1_fu_703_p2;
wire   [7:0] trunc_ln13_3_fu_712_p4;
wire   [7:0] trunc_ln13_1_fu_708_p1;
wire   [31:0] mul_ln12_2_fu_728_p2;
wire   [15:0] lshr_ln13_2_fu_733_p4;
wire   [31:0] zext_ln13_1_fu_743_p1;
wire   [4:0] idx_fu_765_p1;
wire   [12:0] tmp_s_fu_769_p3;
wire   [26:0] out3_1_fu_794_p4;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 src_preg = 32'd0;
#0 src_ap_vld_preg = 1'b0;
#0 dst_preg = 32'd0;
#0 dst_ap_vld_preg = 1'b0;
end

STMS_bitmap #(
    .DataWidth( 1 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
bitmap_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bitmap_address0),
    .ce0(bitmap_ce0),
    .q0(bitmap_q0),
    .address1(bitmap_addr_reg_942),
    .ce1(bitmap_ce1),
    .we1(bitmap_we1),
    .d1(status_reg_850)
);

STMS_fmul_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
STMS_fmul_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p),
    .din1(32'd1325400064),
    .ce(1'b1),
    .dout(grp_fu_202_p2)
);

STMS_uitofp_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
STMS_uitofp_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(out1_reg_845),
    .ce(1'b1),
    .dout(grp_fu_208_p1)
);

STMS_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
STMS_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_861),
    .din1(tmp_1_reg_867),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_211_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dst_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state15) & ((icmp_ln35_fu_753_p2 == 1'd1) | (1'd0 == and_ln22_1_reg_893)))) begin
            dst_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (dst_ap_vld == 1'b1))) begin
            dst_ap_vld_preg <= dst_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dst_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (dst_ap_vld == 1'b1))) begin
            dst_preg <= dst;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state15) & ((icmp_ln35_fu_753_p2 == 1'd1) | (1'd0 == and_ln22_1_reg_893)))) begin
            src_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (src_ap_vld == 1'b1))) begin
            src_ap_vld_preg <= src_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (src_ap_vld == 1'b1))) begin
            src_preg <= src;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (xor_ln40_fu_784_p2 == 1'd1))) begin
        flag_0_fu_128 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln22_1_fu_484_p2))) begin
        flag_0_fu_128 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_0_reg_191 <= i_reg_937;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_reg_191 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        out3_0_reg_181 <= out3_2_fu_804_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        out3_0_reg_181 <= out3_reg_929;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        and_ln22_1_reg_893 <= and_ln22_1_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln35_fu_753_p2 == 1'd0) & (1'd1 == and_ln22_1_reg_893))) begin
        bitmap_addr_reg_942 <= zext_ln40_fu_776_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == and_ln22_1_reg_893))) begin
        i_reg_937 <= i_fu_759_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln22_1_reg_878 <= icmp_ln22_1_fu_452_p2;
        icmp_ln22_2_reg_883 <= icmp_ln22_2_fu_458_p2;
        icmp_ln22_3_reg_888 <= icmp_ln22_3_fu_464_p2;
        icmp_ln22_reg_873 <= icmp_ln22_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k1_3_reg_828 <= k1_3_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((dst_ap_vld_in_sig == 1'b0) | (src_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lshr_ln4_reg_818 <= {{k1_2_fu_221_p2[31:17]}};
        tmp_6_reg_823 <= {{mul_ln4_fu_227_p2[31:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out1_reg_845 <= out1_fu_400_p2;
        status_reg_850 <= status_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out3_reg_929 <= out3_fu_747_p2;
        select_word_reg_924 <= select_word_fu_722_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_1_reg_867 <= grp_fu_202_p2;
        tmp_reg_861 <= grp_fu_208_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        xor_ln11_1_reg_914 <= xor_ln11_1_fu_672_p2;
        xor_ln11_2_reg_919 <= xor_ln11_2_fu_697_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xor_ln11_reg_840 <= xor_ln11_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln22_1_fu_484_p2))) begin
        xor_ln9_1_reg_904 <= xor_ln9_1_fu_563_p2;
        xor_ln9_2_reg_909 <= xor_ln9_2_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xor_ln9_reg_835 <= xor_ln9_fu_338_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & ((icmp_ln35_fu_753_p2 == 1'd1) | (1'd0 == and_ln22_1_reg_893)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & ((icmp_ln35_fu_753_p2 == 1'd1) | (1'd0 == and_ln22_1_reg_893)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bitmap_ce0 = 1'b1;
    end else begin
        bitmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        bitmap_ce1 = 1'b1;
    end else begin
        bitmap_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (xor_ln40_fu_784_p2 == 1'd1))) begin
        bitmap_we1 = 1'b1;
    end else begin
        bitmap_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((dst_ap_vld == 1'b1)) begin
        dst_ap_vld_in_sig = dst_ap_vld;
    end else begin
        dst_ap_vld_in_sig = dst_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_blk_n = dst_ap_vld;
    end else begin
        dst_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((dst_ap_vld == 1'b1)) begin
        dst_in_sig = dst;
    end else begin
        dst_in_sig = dst_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (flag_0_load_load_fu_781_p1 == 1'd1) & (icmp_ln35_fu_753_p2 == 1'd1) & (1'd1 == and_ln22_1_reg_893))) begin
        dst_o_ap_vld = 1'b1;
    end else begin
        dst_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((src_ap_vld == 1'b1)) begin
        src_ap_vld_in_sig = src_ap_vld;
    end else begin
        src_ap_vld_in_sig = src_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        src_blk_n = src_ap_vld;
    end else begin
        src_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((src_ap_vld == 1'b1)) begin
        src_in_sig = src;
    end else begin
        src_in_sig = src_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (flag_0_load_load_fu_781_p1 == 1'd1) & (icmp_ln35_fu_753_p2 == 1'd1) & (1'd1 == and_ln22_1_reg_893))) begin
        src_o_ap_vld = 1'b1;
    end else begin
        src_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((dst_ap_vld_in_sig == 1'b0) | (src_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == and_ln22_1_fu_484_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & ((icmp_ln35_fu_753_p2 == 1'd1) | (1'd0 == and_ln22_1_reg_893)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_2_fu_531_p2 = ($signed(32'd3864292196) + $signed(shl_ln34_1_fu_521_p4));

assign add_ln34_4_fu_610_p2 = ($signed(32'd3864292196) + $signed(shl_ln34_2_fu_600_p4));

assign add_ln34_fu_306_p2 = ($signed(32'd3864292196) + $signed(h1_fu_284_p3));

assign and_ln22_1_fu_484_p2 = (grp_fu_211_p2 & and_ln22_fu_478_p2);

assign and_ln22_fu_478_p2 = (or_ln22_fu_470_p2 & or_ln22_1_fu_474_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((dst_ap_vld_in_sig == 1'b0) | (src_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0));
end

assign bitcast_ln22_1_fu_429_p1 = tmp_1_reg_867;

assign bitcast_ln22_fu_412_p1 = tmp_reg_861;

assign bitmap_address0 = zext_ln40_fu_776_p1;

assign dst_o = dst_in_sig;

assign flag_0_load_load_fu_781_p1 = flag_0_fu_128;

assign h1_10_fu_588_p3 = {{trunc_ln4_2_fu_574_p1}, {lshr_ln4_3_fu_578_p4}};

assign h1_11_fu_616_p2 = (h1_10_fu_588_p3 + add_ln34_4_fu_610_p2);

assign h1_12_fu_622_p2 = (h1_11_fu_616_p2 ^ 32'd4);

assign h1_1_fu_265_p2 = (k1_3_reg_828 ^ 32'd1);

assign h1_2_fu_312_p2 = (shl_ln_fu_296_p4 + add_ln34_fu_306_p2);

assign h1_3_fu_318_p2 = (h1_2_fu_312_p2 ^ 32'd4);

assign h1_5_fu_490_p2 = (k1_3_reg_828 ^ 32'd2);

assign h1_6_fu_509_p3 = {{trunc_ln4_1_fu_495_p1}, {lshr_ln4_2_fu_499_p4}};

assign h1_7_fu_537_p2 = (h1_6_fu_509_p3 + add_ln34_2_fu_531_p2);

assign h1_8_fu_543_p2 = (h1_7_fu_537_p2 ^ 32'd4);

assign h1_9_fu_569_p2 = (k1_3_reg_828 ^ 32'd3);

assign h1_fu_284_p3 = {{trunc_ln4_fu_270_p1}, {lshr_ln4_1_fu_274_p4}};

assign i_fu_759_p2 = (i_0_reg_191 + 3'd1);

assign icmp_ln22_1_fu_452_p2 = ((trunc_ln22_fu_425_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_2_fu_458_p2 = ((tmp_3_fu_432_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_3_fu_464_p2 = ((trunc_ln22_1_fu_442_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_446_p2 = ((tmp_2_fu_415_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_753_p2 = ((i_0_reg_191 == 3'd4) ? 1'b1 : 1'b0);

assign idx_fu_765_p1 = out3_0_reg_181[4:0];

assign k1_2_fu_221_p2 = ($signed(32'd3432918353) * $signed(key_fu_215_p2));

assign k1_3_fu_259_p2 = ($signed({{1'b0}, {32'd461845907}}) * $signed(k1_fu_253_p3));

assign k1_fu_253_p3 = {{tmp_6_reg_823}, {lshr_ln4_reg_818}};

assign key_fu_215_p2 = (src_in_sig ^ dst_in_sig);

assign lshr_ln11_1_fu_658_p4 = {{mul_ln10_1_fu_653_p2[31:13]}};

assign lshr_ln11_2_fu_683_p4 = {{mul_ln10_2_fu_678_p2[31:13]}};

assign lshr_ln13_2_fu_733_p4 = {{mul_ln12_2_fu_728_p2[31:16]}};

assign lshr_ln1_fu_374_p4 = {{mul_ln12_fu_369_p2[31:16]}};

assign lshr_ln4_1_fu_274_p4 = {{h1_1_fu_265_p2[31:19]}};

assign lshr_ln4_2_fu_499_p4 = {{h1_5_fu_490_p2[31:19]}};

assign lshr_ln4_3_fu_578_p4 = {{h1_9_fu_569_p2[31:19]}};

assign lshr_ln9_1_fu_549_p4 = {{h1_8_fu_543_p2[31:16]}};

assign lshr_ln9_2_fu_628_p4 = {{h1_12_fu_622_p2[31:16]}};

assign lshr_ln9_fu_324_p4 = {{h1_3_fu_318_p2[31:16]}};

assign lshr_ln_fu_349_p4 = {{mul_ln10_fu_344_p2[31:13]}};

assign mul_ln10_1_fu_653_p2 = ($signed(32'd2246822507) * $signed(xor_ln9_1_reg_904));

assign mul_ln10_2_fu_678_p2 = ($signed(32'd2246822507) * $signed(xor_ln9_2_reg_909));

assign mul_ln10_fu_344_p2 = ($signed(32'd2246822507) * $signed(xor_ln9_reg_835));

assign mul_ln12_1_fu_703_p2 = ($signed(32'd3266489909) * $signed(xor_ln11_1_reg_914));

assign mul_ln12_2_fu_728_p2 = ($signed(32'd3266489909) * $signed(xor_ln11_2_reg_919));

assign mul_ln12_fu_369_p2 = ($signed(32'd3266489909) * $signed(xor_ln11_reg_840));

assign mul_ln4_fu_227_p2 = ($signed({{1'b0}, {32'd380141568}}) * $signed(key_fu_215_p2));

assign or_ln22_1_fu_474_p2 = (icmp_ln22_3_reg_888 | icmp_ln22_2_reg_883);

assign or_ln22_fu_470_p2 = (icmp_ln22_reg_873 | icmp_ln22_1_reg_878);

assign out1_fu_400_p2 = (zext_ln13_fu_384_p1 ^ mul_ln12_fu_369_p2);

assign out3_1_fu_794_p4 = {{out3_0_reg_181[31:5]}};

assign out3_2_fu_804_p1 = out3_1_fu_794_p4;

assign out3_fu_747_p2 = (zext_ln13_1_fu_743_p1 ^ mul_ln12_2_fu_728_p2);

assign select_word_fu_722_p2 = (trunc_ln13_3_fu_712_p4 ^ trunc_ln13_1_fu_708_p1);

assign shl_ln34_1_fu_521_p4 = {{{trunc_ln34_1_fu_517_p1}, {lshr_ln4_2_fu_499_p4}}, {2'd0}};

assign shl_ln34_2_fu_600_p4 = {{{trunc_ln34_2_fu_596_p1}, {lshr_ln4_3_fu_578_p4}}, {2'd0}};

assign shl_ln_fu_296_p4 = {{{trunc_ln34_fu_292_p1}, {lshr_ln4_1_fu_274_p4}}, {2'd0}};

assign src_o = src_in_sig;

assign status_fu_406_p2 = (trunc_ln13_fu_388_p1 ^ tmp_5_fu_392_p3);

assign tmp_2_fu_415_p4 = {{bitcast_ln22_fu_412_p1[30:23]}};

assign tmp_3_fu_432_p4 = {{bitcast_ln22_1_fu_429_p1[30:23]}};

assign tmp_5_fu_392_p3 = mul_ln12_fu_369_p2[32'd16];

assign tmp_s_fu_769_p3 = {{select_word_reg_924}, {idx_fu_765_p1}};

assign trunc_ln13_1_fu_708_p1 = mul_ln12_1_fu_703_p2[7:0];

assign trunc_ln13_3_fu_712_p4 = {{mul_ln12_1_fu_703_p2[23:16]}};

assign trunc_ln13_fu_388_p1 = mul_ln12_fu_369_p2[0:0];

assign trunc_ln22_1_fu_442_p1 = bitcast_ln22_1_fu_429_p1[22:0];

assign trunc_ln22_fu_425_p1 = bitcast_ln22_fu_412_p1[22:0];

assign trunc_ln34_1_fu_517_p1 = h1_5_fu_490_p2[16:0];

assign trunc_ln34_2_fu_596_p1 = h1_9_fu_569_p2[16:0];

assign trunc_ln34_fu_292_p1 = h1_1_fu_265_p2[16:0];

assign trunc_ln4_1_fu_495_p1 = h1_5_fu_490_p2[18:0];

assign trunc_ln4_2_fu_574_p1 = h1_9_fu_569_p2[18:0];

assign trunc_ln4_fu_270_p1 = h1_1_fu_265_p2[18:0];

assign xor_ln11_1_fu_672_p2 = (zext_ln11_1_fu_668_p1 ^ mul_ln10_1_fu_653_p2);

assign xor_ln11_2_fu_697_p2 = (zext_ln11_2_fu_693_p1 ^ mul_ln10_2_fu_678_p2);

assign xor_ln11_fu_363_p2 = (zext_ln11_fu_359_p1 ^ mul_ln10_fu_344_p2);

assign xor_ln40_fu_784_p2 = (status_reg_850 ^ bitmap_q0);

assign xor_ln9_1_fu_563_p2 = (zext_ln9_1_fu_559_p1 ^ h1_8_fu_543_p2);

assign xor_ln9_2_fu_642_p2 = (zext_ln9_2_fu_638_p1 ^ h1_12_fu_622_p2);

assign xor_ln9_fu_338_p2 = (zext_ln9_fu_334_p1 ^ h1_3_fu_318_p2);

assign zext_ln11_1_fu_668_p1 = lshr_ln11_1_fu_658_p4;

assign zext_ln11_2_fu_693_p1 = lshr_ln11_2_fu_683_p4;

assign zext_ln11_fu_359_p1 = lshr_ln_fu_349_p4;

assign zext_ln13_1_fu_743_p1 = lshr_ln13_2_fu_733_p4;

assign zext_ln13_fu_384_p1 = lshr_ln1_fu_374_p4;

assign zext_ln40_fu_776_p1 = tmp_s_fu_769_p3;

assign zext_ln9_1_fu_559_p1 = lshr_ln9_1_fu_549_p4;

assign zext_ln9_2_fu_638_p1 = lshr_ln9_2_fu_628_p4;

assign zext_ln9_fu_334_p1 = lshr_ln9_fu_324_p4;

endmodule //STMS
